sensor:
  - platform: rotary_encoder
    name: "Rotary Encoder"
    internal: true
    pin_a:
      number: ${rotary_pin_a}
      mode:
        pullup: true
        input: true
    pin_b:
      number: ${rotary_pin_b}
      mode:
        pullup: true
        input: true
    filters:
      - throttle: 1s
    on_anticlockwise:
      - if:
          condition:
            - lambda: return id(oled).is_on();
          then:
            - if:
                condition:
                  display_menu.is_active:
                then:
                  - display_menu.up:
                else:
                  if:
                    condition:
                      lambda: return id(fan_mode).state == "MANUAL";
                    then:
                      if:
                        condition:
                          lambda: return id(my_fan).speed < 99;
                        then:
                          fan.turn_on:
                            id: my_fan
                            speed: !lambda return id(my_fan).speed + 1;
                    else:
                      climate.control:
                        id: fan_climate
                        target_temperature: !lambda return id(fan_climate).target_temperature + 1;
            - component.update: oled
      - script.execute: display_wakeup
    on_clockwise:
      - if:
          condition:
            - lambda: return id(oled).is_on();
          then:
            - if:
                condition:
                  display_menu.is_active:
                then:
                  - display_menu.down:
                else:
                  if:
                    condition:
                      lambda: return id(fan_mode).state == "MANUAL";
                    then:
                      if:
                        condition:
                          lambda: return id(my_fan).speed > 1;
                        then:
                          fan.turn_on:
                            id: my_fan
                            speed: !lambda return id(my_fan).speed - 1;
                        else:
                          fan.turn_off: my_fan
                    else:
                      climate.control:
                        id: fan_climate
                        target_temperature: !lambda return id(fan_climate).target_temperature - 1;
            - component.update: oled
      - script.execute: display_wakeup

binary_sensor:
  - platform: gpio
    name: button
    id: button
    internal: true
    pin:
      number: ${button_pin}
      inverted: true
      mode:
        pullup: true
        input: true
    on_multi_click:
      - timing:
          - ON for at most 0.5s
          - OFF for at least 0.6s
        then:
          - if:
              condition:
                display_menu.is_active: oled_menu
              then:
                - display_menu.enter: oled_menu
              else:
                - cover.toggle: vent_lid
          - script.execute: display_wakeup
      - timing:
          - ON for at most 0.5s
          - OFF for at most 0.5s
          - ON for at most 0.5s
          - OFF for at least 0.5s
        then:
          - display_menu.show: oled_menu
